
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Securely check if the currently authenticated user has the 'admin' role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Top-Level Collection Rules ---

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read and update their own profile.
      // Admins can read any user profile.
      allow get: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId);
      // Only admins can list all users for the admin panel.
      allow list: if isAdmin();
      // Admins can delete users (e.g., for banning).
      allow delete: if isAdmin();
      // User creation is handled by a backend function on registration.
      allow create: if request.auth != null;
    }

    // Rules for the 'plans' collection
    match /plans/{planId} {
      // Any authenticated user can read the list of plans.
      allow get, list: if request.auth != null;
      // Only admins can create, update, or delete plans.
      allow write, delete: if isAdmin();
    }

    // Rules for the 'payments' collection
    match /payments/{paymentId} {
        // A user can create a payment submission for themselves.
        allow create: if isOwner(request.resource.data.userId);
        // Admins can read, list, and update all payments.
        allow get, list, update: if isAdmin();
    }

    // --- User Sub-collection Rules ---
    // This single rule secures all data nested under a user's document.
    match /users/{userId}/{path=**} {
      // A user can perform any action on their own nested data.
      // Admins can also access this data for support or management.
      allow read, write, delete: if isOwner(userId) || isAdmin();
    }
  }
}
